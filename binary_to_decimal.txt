.data:
    prompt: .asciiz "\nIngresa el número binario: "    # Mensaje de entrada
    result_msg: .asciiz "\nNúmero binario en decimal: " # Mensaje de salida
    newline: .asciiz "\n"
    buffer: .space 9  # Espacio para almacenar 8 caracteres binarios + terminador nulo

binary_to_decimal:
    la $a0, prompt
    li $v0, 4                   #syscall imprimirá una cadena
    syscall                     #llamada al print con parámetros a0 = prompt

    la $a0, buffer
    li $a1, 9                   # Longitud máxima (8 + terminador nulo)
    li $v0, 8                   #syscall modo lectura de cadena, v0 = input
    syscall

    la $t0, buffer              #t0 apunta al inicio de la cadena
    li $t1, 0                   #t1 = decimal acumulará el resultado decimal

    for:
        lb $t2, 0($t0)          # t2 = binary[i] Leer el carácter actual en t2
        beqz $t2, done          # cuando t2 sea 0, finaliza el bucle
        sub $t2, $t2, 48        # t2 = binary[i] - '0' Convertir a acci. '0'=48
        mul $t1, $t1, 2         #decimal*2
        add $t1, $t1, $t2       #decimal = decimal*2 + (binary[i] - '0')
        addi $t0, $t0, 1        #mover al siguiente carácter

        j for

    done:
        move $a0, $t1           #a0 = decimal
        li $v0, 1               #syscall imprimirá un entero
        syscall

        la $a0, newline
        li $v0, 4                   #syscall imprimirá una cadena
        syscall

        li $v0, 10              #cerrar syscall
        syscall